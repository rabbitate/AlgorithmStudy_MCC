//
//  main.c
//  HeapSort
//
//  Created by rabbi on 2021/09/02.
//

// Heap Sort
// 시간 복잡도: O(Nlog2(N))
// Heap의 데이터 저장 시간 복잡도: O(log2(N)) Heap의 데이터 삭제 시간 복잡도: O(log2(N))
// 정렬 대상의 수: N

// 우선 순위 큐(Priority Queue): 우선 순위가 높은 순으로 Dequeue한다.
// 완전 이진 트리(Complete Binary Tree)인 Heap의 구현
// 우선 순위 큐(Priority Queue)를 구현할 때,
// 배열로 구현하게 되면 우선 순위가 중간인 것이 들어가게 되면 하나씩 뒤로 밀고 그 자리에 넣어야하고
// 링크드리스트로 구현하게 되면 최악의 경우 우선 순위를 비교하기 위해 맨 끝까지 비교해야한다 O(n)
// Heap으로 구현할 경우, 이진트리의 높이가 증가할 때마다 계산 횟수는 1 증가, 저장 가능한 자료 개수는 2배 증가 하므로 O(log2n)
// 따라서 우선 순위 큐는 Heap으로 구현

// Heap은 linked list가 아닌, 배열로 구현(마지막 요소 접근이 배열이 더 용이하기 때문)

#include <stdio.h>
#include <stdlib.h>

#define HEAP_LEN 100

typedef int Priority; // 우선 순위를 int로 지정
typedef int Data;

typedef struct HeapElem {
    Priority pr; // 값이 작을 수록 우선 순위가 높게 설정
    Data data;
}HeapElem;

typedef struct Heap{
    int numOfData;
    HeapElem heapArr[HEAP_LEN]; // 편의를 위해 index 0은 비워두고 사용한다
}Heap;

void HeapInit(Heap* heap) {
    heap->numOfData = 0;
}

int GetParentIDX(int idx) {
    return idx / 2;
}

int GetLChildIDX(int idx) {
    return idx * 2;
}

int GetRChildIDX(int idx) {
    return GetLChildIDX(idx) + 1;
}

// Left Sub Tree, Right Sub Tree의 root node의 우선 순위를 비교해, 높은 곳의 index를 반환해주는 함수
int GetHighChildIDX(Heap* heap, int idx) {
    if(GetLChildIDX(idx) > heap->numOfData) { // Left Sub Tree가 없는 경우
        return 0;
    } else if(GetLChildIDX(idx) == heap->numOfData) {// Left Sub Tree만 있는 경우
        return GetLChildIDX(idx);
    } else {
        // Left Sub Tree의 root node의 우선 순위가 Right Sub Tree의 root node의 우선 순위보다 높을 경우
            if(heap->heapArr[GetLChildIDX(idx)].pr < heap->heapArr[GetRChildIDX(idx)].pr) {
                return GetLChildIDX(idx); // left child의 index 반환
            } else {
                return GetRChildIDX(idx);
            }
    }
}

// Heap에 데이터 저장
void HInsert(Heap* heap, Data data, Priority pr) {
    if(heap->numOfData < HEAP_LEN - 1) {
        HeapElem newElem = {pr, data};
        int idx = heap->numOfData + 1;
        while(idx != 1) {
            if(pr < heap->heapArr[GetParentIDX(idx)].pr) {
                heap->heapArr[idx] = heap->heapArr[GetParentIDX(idx)];
                idx = GetParentIDX(idx);
            } else {
                break;
            }
        }
        heap->heapArr[idx] = newElem;
        heap->numOfData++;
    }
}

// Heap에서 Data 삭제 후 반환
Data HDelete(Heap* heap) {
    Data data = heap->heapArr[1].data;
    HeapElem lastElem = heap->heapArr[heap->numOfData];
    int idx = 1;
    int childIdx;
    while(childIdx = GetHighChildIDX(heap, idx)) {
        if(lastElem.pr <= heap->heapArr[childIdx].pr) {
            break;
        }
        heap->heapArr[idx] = heap->heapArr[childIdx];
        idx = childIdx;
    }
    
    heap->heapArr[idx] = lastElem;
    heap->numOfData--;
    return data;
}

void HeapSort(int* array, int size) {
    Heap heap;
    HeapInit(&heap);
    
    for(int i = 0; i < size; i++){
        HInsert(&heap, array[i], array[i]); // Data의 크기와 우선 순위를 같게하고 삽입
    }
    
    for(int i = 0; i < size; i++){
        array[i] = HDelete(&heap);
    }
}

int main(int argc, const char * argv[]) {
    int* array;
    int size;
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &size);
    array = (int*)malloc(sizeof(int) * size);
    
    printf("배열의 요소를 입력하세요: ");
    for(int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }
    
    printf("정렬 전: ");
    for(int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    
    printf("\n");
    
    HeapSort(array, size);
    
    printf("정렬 후: ");
    for(int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    return 0;
}
